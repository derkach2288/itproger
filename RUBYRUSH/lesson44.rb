puts "Маша и Гоша".match(/Гоша/)  # => Гоша # .match ищет регулярные выражения в //

puts "Маша и Гоша" =~  (/Гоша/)   # => 7 # возвращает позицию (номер символа) в строке, где впервые было встречено совпадение

puts 'cat' =~ /c.t/   # => 0  # точка в регулярном выражении означает, что на ее месте возможен любой единственный символ, 
                              # будь то ОДНО число, ОДНА буква или иной символ:

puts 'scute' =~ /c.t/   # => 1
puts 'caat' =~ /c.t/   # => nil


'cat' =~ /^c.t/ # => 0 # якорь (anchor) ^ — означающий начало строки.  мы явно указываем, что символ с должен идти первым.

'1cat' =~ /^c.t/ # => nil #  случае же иного символа на первом месте после якоря (начала строки) метод вернет нам nil

'cat' =~ /^c.t$/ # => 0 # буква t должна быть последней в строке. Для этого воспользуемся якорем $ — обозначающим конец строки:

'cute' =~ /^c.t$/ # => nil # буква t не является последним символом, отсюда и результат nil.

'catttttttttttttttt' =~ /^c.t*$/ # => 0 # квантификатор символ звездочки * вместо * вписать любое количество символов от нуля до бесконечности

'ca' =~ /^c.t*$/ # => 0

'cat' =~ /^c.+t$/ # => 0 # квантификатор + проверяет количество символов от одного до бесконечности:
'catttttt' =~ /^c.+t$/ # => 0
'ct' =~ /^c.+t$/ # => nil
'cathhjgjg' =~ /^c.+t$/ # => nil
'cathhjgjgt' =~ /^c.+t$/ # => 0

'01234567890' =~ /^[0-9]*$/ # => 0 # все то, что находится в квадратных скобках
'0123456x7890' =~ /^[0-9]*$/ # => nil

'43233224244' =~ /^[234]*$/ # => 0 # Последовательность чисел не имеет значения
'2341' =~ /^[234]*$/ # => nil
'234a' =~ /^[234]*$/ # => nil

/^[a-z0-9]+@[a-z0-9]+\.[a-z]+/ =~ 'google@gmail.com' # => 0 # упрощенное регулярное выражение, которое проверяет корректность веденного email

/^[a-z0-9]+@[a-z0-9]+\.[a-z]+/ =~ 'google@gmail.%%' # => nil # 

/^[\w\d]+@[\w\d]+\.[\w]+/ =~ 'google2012@gmail.com' #=> 0 #\w — аналогично выражению [a-zA-Z], то есть любая буква английского алфавита, 
# независимая от case, но помимо этого также допускается наличие знака нижнего подчеркивания _, что в общем то нам и требуется для 
# проверки email, поскольку данный символ в адресе электронной почты допустим
# \d — аналогично выражению [0-9], то есть проверяет строку на наличие любых чисел



'I have an old car'.gsub('an old', 'a new') # => "I have a new car"

'I have a new car'.gsub(/a/, '1') # => "I h1ve 1 new c1r"