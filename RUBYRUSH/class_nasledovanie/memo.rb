                   # Класс «Заметка», разновидность базового класса «Запись»
class Memo < Post  # отдельный конструктор здесь не нужен, т. к. он совпадает с родительским


                    # Напишем реализацию метода read_from_console для экземпляра заметки. Он
                    # спрашивает у пользователя текст заметки все строки (до слова end) и
                    # записывает их в переменную экземпляра, массив @text.
    def read_from_console
        puts "Новая заметка (все, что пишете до строчки \"end\"):"

        @text = []
        line = nil   # Для старта цикла запишем в переменную line nil
        
        while line != "end" do
            line = STDIN.gets.chomp
            @text << line
        end 

        @text.pop  # удаляем последнюю строчку (слово end)
    end
 
 
                    # Метод to_string должен вернуть все строки, которые мы хотим записать в
                    # файл при записи нашей заметки: помимо всех строк массива @text (тела
                    # заметки) мы положим туда строку с датой создания заметки.
    def to_strings  # Массив из трех строк: адрес ссылки, описание и дата создания

                    # Сгенерируем строку с датой создания заметки используя объект класса Time,
                    # который у нас находится в переменной @created_at (смотрите конструктор
                    # класса-родителя Post).
        time_string = "Создано: #{@created_at.strftime('%Y.%m.%d, %H:%M:%S')}\n\r"

        @text.unshift(time_string)  # Возвращаем массив @text с добавление в начало массива (методом массива unshift)
                                    # строчки с датой создания заметки.
    end

end